name: "RenderForCNN"
# layer {
#   name: "data"
#   type: "Data"
#   top: "data"
#   data_param {
#     source: "/media/Work_4T/qchen/RenderForCNN/data/syn_lmdbs/syn_lmdb_train_image"
#     backend: LMDB
#     batch_size: 192
#
#   }
#
#   transform_param {
#     crop_size: 227
#     mean_value: 104
#     mean_value: 117
#     mean_value: 123
#     mirror: false
#   }
#   include: { phase: TRAIN }
# }
# layer {
#   name: "label"
#   type: "Data"
#   top: "label"
#   data_param {
#     source: "/media/Work_4T/qchen/RenderForCNN/data/syn_lmdbs/syn_lmdb_train_label"
#     backend: LMDB
#     batch_size: 192
#   }
#   include: { phase: TRAIN }
# }
layer {
 name: "data"
 type: "Python"
 top: "data"
 python_param {
   module: "HardExamMinLayer"
   layer: "Render4CNNLayer"
   param_str: "{\'source\': \'/media/Work_4T/qchen/RenderForCNN/data/syn_lmdbs/syn_lmdb_train_image\', \'seed\': 1337,  \'batch_size\': 192}"
 }
}
layer {
 name: "label"
 type: "Python"
 top: "label"
 python_param {
   module: "HardExamMinLayer"
   layer: "Render4CNNLayer"
   param_str: "{\'source\': \'/media/Work_4T/qchen/RenderForCNN/data/syn_lmdbs/syn_lmdb_train_label\', \'seed\': 1337,  \'batch_size\': 192}"
 }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  data_param {
    source: "/media/Work_4T/qchen/RenderForCNN/data/syn_lmdbs/syn_lmdb_test_image"
    backend: LMDB
    batch_size: 64
  }
  transform_param {
    crop_size: 227
    mean_file: "/media/Work_4T/qchen/RenderForCNN/train/imagenet_mean.binaryproto"
    mirror: false
  }
  include: { phase: TEST }
}
layer {
  name: "label"
  type: "Data"
  top: "label"
  data_param {
    source: "/media/Work_4T/qchen/RenderForCNN/data/syn_lmdbs/syn_lmdb_test_label"
    backend: LMDB
    batch_size: 64
  }
  include: { phase: TEST }
}

layer {
  name: "labe-slice"
  type: "Slice"
  bottom: "label"
  top: "label_class"
  top: "label_azimuth"
  top: "label_elevation"
  top: "label_tilt"
  slice_param {
    slice_dim: 1
    slice_point: 1
    slice_point: 2
    slice_point: 3
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "conv3"
  top: "conv3"
  name: "relu3"
  type: "ReLU"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}

# layer {
#   name: "fc-class"
#   type: "InnerProduct"
#   bottom: "fc7"
#   top: "fc-class"
#   param {
#     lr_mult: 0
#     decay_mult: 1
#   }
#   param {
#     lr_mult: 0
#     decay_mult: 0
#   }
#   inner_product_param {
#     num_output: 12
#     weight_filler {
#       type: "gaussian"
#       std: 0.01
#     }
#     bias_filler {
#       type: "constant"
#       value: 0
#     }
#   }
# }

layer {
  name: "fc-azimuth"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc-azimuth"
  param {
     lr_mult: 1
     decay_mult: 1
    }
  param {
     lr_mult: 2
     decay_mult: 0
     }

  inner_product_param {
    num_output: 4320
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
#test part
layer {
  name: "loss_azimuth"
  type: "Python"
  python_param {
    module: "LossLayer"
    layer: "SoftmaxViewLoss"
    param_str: "{\'bandwidth\': 15, \'sigma\': 5,  \'pos_weight\': 1, \'neg_weight\': 0, \'period\': 360}"
  }
  bottom: "fc-azimuth"
  bottom: "label_azimuth"
  top: "loss_azimuth"
  loss_weight: 1
}
layer {
  name: "accuracy_azimuth"
  type: "Python"
  bottom: "fc-azimuth"
  bottom: "label_azimuth"
  top: "accuracy_azimuth"
  python_param {
    module: "AccuracyLayer"
    layer: "AccuracyView"
    param_str: "{\'tol_angle\': 15,  \'period\': 360}"
  }
}

layer {
  name: "fc-elevation"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc-elevation"
  param {
     lr_mult: 1
     decay_mult: 1
    }
  param {
     lr_mult: 2
     decay_mult: 0
     }
 inner_product_param {
    num_output: 4320
    weight_filler {
        type: "gaussian"
        std: 0.01
    }
    bias_filler {
        type: "constant"
        value: 0
        }
    }
}
# layer {
#   name: "loss_class"
#   type: "Python"
#   bottom: "fc-class"
#   bottom: "label_class"
#   top: "loss_class"
#   python_param {
#     module: "MySoftmaxLayer"
#     layer: "MySoftmaxLayer"
#
#   }
#   loss_weight: 1
# }
#
# layer {
#   name: "accuracy_class"
#   type: "Accuracy"
#   bottom: "fc-class"
#   bottom: "label_class"
#   top: "accuracy_class"
# }
layer {
  name: "loss_elevation"
  type: "Python"
  python_param {
    module: "LossLayer"
    layer: "SoftmaxViewLoss"
    param_str: "{\'bandwidth\': 5, \'sigma\': 3,  \'pos_weight\': 1, \'neg_weight\': 0, \'period\': 360}"
  }
  bottom: "fc-elevation"
  bottom: "label_elevation"
  top: "loss_elevation"
  loss_weight: 1
}

layer {
  name: "accuracy_elevation"
  type: "Python"
  bottom: "fc-elevation"
  bottom: "label_elevation"
  top: "accuracy_elevation"
  python_param {
    module: "AccuracyLayer"
    layer: "AccuracyView"
    param_str: "{\'tol_angle\': 5,  \'period\': 360}"
  }
}
layer {
  name: "fc-tilt"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc-tilt"
  param {
     lr_mult: 1
     decay_mult: 1
    }
  param {
     lr_mult: 2
     decay_mult: 0
     }
  inner_product_param {
    num_output: 4320
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss_tilt"
  type: "Python"
  python_param {
    module: "LossLayer"
    layer: "SoftmaxViewLoss"
    param_str: "{\'bandwidth\': 5, \'sigma\': 3,  \'pos_weight\': 1, \'neg_weight\': 0, \'period\': 360}"
  }
  bottom: "fc-tilt"
  bottom: "label_tilt"
  top: "loss_tilt"
  loss_weight: 1
}

layer {
  name: "accuracy_tilt"
  type: "Python"
  bottom: "fc-tilt"
  bottom: "label_tilt"
  top: "accuracy_tilt"
  python_param {
    module: "AccuracyLayer"
    layer: "AccuracyView"
    param_str: "{\'tol_angle\': 5,  \'period\': 360}"
  }
}

layer {
  name: "silence_layer"
  type: "Silence"
  bottom: "label_class"
}
